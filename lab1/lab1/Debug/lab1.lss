
lab1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004a  00800100  00000628  000006bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000628  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000011  0080014a  0080014a  00000706  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000706  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000738  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  00000778  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011a4  00000000  00000000  00000870  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bea  00000000  00000000  00001a14  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000080e  00000000  00000000  000025fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000284  00000000  00000000  00002e0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005e7  00000000  00000000  00003090  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000061d  00000000  00000000  00003677  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  00003c94  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	19 c1       	rjmp	.+562    	; 0x284 <__vector_20>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	6b c1       	rjmp	.+726    	; 0x338 <__vector_24>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	36 c1       	rjmp	.+620    	; 0x2de <__vector_28>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 e2       	ldi	r30, 0x28	; 40
  a0:	f6 e0       	ldi	r31, 0x06	; 6
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 34       	cpi	r26, 0x4A	; 74
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	aa e4       	ldi	r26, 0x4A	; 74
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ab 35       	cpi	r26, 0x5B	; 91
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	bf d0       	rcall	.+382    	; 0x242 <main>
  c4:	af c2       	rjmp	.+1374   	; 0x624 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <adc_init>:
 *  Author: lucas
 */ 
#include "adc.h"

void adc_init(){
	ADCSRA |= (1<<ADEN)|(1<<ADIE)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
  c8:	ea e7       	ldi	r30, 0x7A	; 122
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	80 81       	ld	r24, Z
  ce:	8f 68       	ori	r24, 0x8F	; 143
  d0:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0)|(1 << MUX0); //MUX1 is for the Z axis, MUX0 for the Y axis and remove |(1 << MUX1) for the X axis
  d2:	ec e7       	ldi	r30, 0x7C	; 124
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	80 81       	ld	r24, Z
  d8:	81 64       	ori	r24, 0x41	; 65
  da:	80 83       	st	Z, r24
  dc:	08 95       	ret

000000de <big_acceleration>:
}

char big_acceleration(char data){
	if (abs((int)data-125)>5){
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	8d 57       	subi	r24, 0x7D	; 125
  e2:	91 09       	sbc	r25, r1
  e4:	9c 01       	movw	r18, r24
  e6:	22 f4       	brpl	.+8      	; 0xf0 <big_acceleration+0x12>
  e8:	22 27       	eor	r18, r18
  ea:	33 27       	eor	r19, r19
  ec:	28 1b       	sub	r18, r24
  ee:	39 0b       	sbc	r19, r25
  f0:	26 30       	cpi	r18, 0x06	; 6
  f2:	31 05       	cpc	r19, r1
  f4:	14 f4       	brge	.+4      	; 0xfa <big_acceleration+0x1c>
		return (0x31);
	}
	return (0x30);
  f6:	80 e3       	ldi	r24, 0x30	; 48
  f8:	08 95       	ret
	ADMUX |= (1<<REFS0)|(1 << MUX0); //MUX1 is for the Z axis, MUX0 for the Y axis and remove |(1 << MUX1) for the X axis
}

char big_acceleration(char data){
	if (abs((int)data-125)>5){
		return (0x31);
  fa:	81 e3       	ldi	r24, 0x31	; 49
	}
	return (0x30);
}
  fc:	08 95       	ret

000000fe <adc_start_conversion>:

void adc_start_conversion(){
	ADCSRA |= (1<<ADSC);
  fe:	ea e7       	ldi	r30, 0x7A	; 122
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	80 81       	ld	r24, Z
 104:	80 64       	ori	r24, 0x40	; 64
 106:	80 83       	st	Z, r24
 108:	08 95       	ret

0000010a <sim808_command>:
	}
	return(1);
// We assume that the sim is initialized for the rest of these functions	
	
}*/
void sim808_command(char *command){  //calling this function will result in sending the desired command to the SIM808
 10a:	0f 93       	push	r16
 10c:	1f 93       	push	r17
 10e:	cf 93       	push	r28
 110:	df 93       	push	r29
	
	int i;
	int lenght = strlen(command);
 112:	fc 01       	movw	r30, r24
 114:	01 90       	ld	r0, Z+
 116:	00 20       	and	r0, r0
 118:	e9 f7       	brne	.-6      	; 0x114 <sim808_command+0xa>
 11a:	31 97       	sbiw	r30, 0x01	; 1
 11c:	e8 1b       	sub	r30, r24
 11e:	f9 0b       	sbc	r31, r25
	for(i=0; i<lenght; i++){
 120:	1e 16       	cp	r1, r30
 122:	1f 06       	cpc	r1, r31
 124:	4c f4       	brge	.+18     	; 0x138 <sim808_command+0x2e>
 126:	ec 01       	movw	r28, r24
 128:	8c 01       	movw	r16, r24
 12a:	0e 0f       	add	r16, r30
 12c:	1f 1f       	adc	r17, r31
		
		usart1_transmit(command[i]); //there might be problems with things like +
 12e:	89 91       	ld	r24, Y+
 130:	3e d1       	rcall	.+636    	; 0x3ae <usart1_transmit>
}*/
void sim808_command(char *command){  //calling this function will result in sending the desired command to the SIM808
	
	int i;
	int lenght = strlen(command);
	for(i=0; i<lenght; i++){
 132:	c0 17       	cp	r28, r16
 134:	d1 07       	cpc	r29, r17
 136:	d9 f7       	brne	.-10     	; 0x12e <sim808_command+0x24>
		
		usart1_transmit(command[i]); //there might be problems with things like +
	}
}
 138:	df 91       	pop	r29
 13a:	cf 91       	pop	r28
 13c:	1f 91       	pop	r17
 13e:	0f 91       	pop	r16
 140:	08 95       	ret

00000142 <concat>:
	_delay_ms(50);

}


char* concat(const char *s1, const char *s2){
 142:	ef 92       	push	r14
 144:	ff 92       	push	r15
 146:	0f 93       	push	r16
 148:	1f 93       	push	r17
 14a:	cf 93       	push	r28
 14c:	df 93       	push	r29
 14e:	8c 01       	movw	r16, r24
 150:	eb 01       	movw	r28, r22
	char *result = malloc(strlen(s1) + strlen(s2) + 1); // +1 for the null-terminator
 152:	fc 01       	movw	r30, r24
 154:	01 90       	ld	r0, Z+
 156:	00 20       	and	r0, r0
 158:	e9 f7       	brne	.-6      	; 0x154 <concat+0x12>
 15a:	31 97       	sbiw	r30, 0x01	; 1
 15c:	cf 01       	movw	r24, r30
 15e:	80 1b       	sub	r24, r16
 160:	91 0b       	sbc	r25, r17
 162:	fb 01       	movw	r30, r22
 164:	01 90       	ld	r0, Z+
 166:	00 20       	and	r0, r0
 168:	e9 f7       	brne	.-6      	; 0x164 <concat+0x22>
 16a:	31 97       	sbiw	r30, 0x01	; 1
 16c:	e6 1b       	sub	r30, r22
 16e:	f7 0b       	sbc	r31, r23
 170:	8e 0f       	add	r24, r30
 172:	9f 1f       	adc	r25, r31
 174:	01 96       	adiw	r24, 0x01	; 1
 176:	23 d1       	rcall	.+582    	; 0x3be <malloc>
 178:	7c 01       	movw	r14, r24
	// in real code you would check for errors in malloc here
	strcpy(result, s1);
 17a:	b8 01       	movw	r22, r16
 17c:	4c d2       	rcall	.+1176   	; 0x616 <strcpy>
	strcat(result, s2);
 17e:	be 01       	movw	r22, r28
 180:	c7 01       	movw	r24, r14
 182:	3e d2       	rcall	.+1148   	; 0x600 <strcat>
	return result;
}
 184:	c7 01       	movw	r24, r14
 186:	df 91       	pop	r29
 188:	cf 91       	pop	r28
 18a:	1f 91       	pop	r17
 18c:	0f 91       	pop	r16
 18e:	ff 90       	pop	r15
 190:	ef 90       	pop	r14
 192:	08 95       	ret

00000194 <sim808_send_sms>:
		return(1);
		}
	return(0);*/
	

void sim808_send_sms(char *sms, char* tel_number){
 194:	0f 93       	push	r16
 196:	1f 93       	push	r17
 198:	cf 93       	push	r28
 19a:	df 93       	push	r29
 19c:	ec 01       	movw	r28, r24
 19e:	8b 01       	movw	r16, r22
	
	sim808_command("AT+CMGF=1"); //the command which set the sim to TEXT mode not PDU (data) mode. You must do this because otherwise you cannot
 1a0:	86 e0       	ldi	r24, 0x06	; 6
 1a2:	91 e0       	ldi	r25, 0x01	; 1
 1a4:	b2 df       	rcall	.-156    	; 0x10a <sim808_command>
	                             //just type out the message.
	usart1_transmit(0xD);  // <CR>
 1a6:	8d e0       	ldi	r24, 0x0D	; 13
 1a8:	02 d1       	rcall	.+516    	; 0x3ae <usart1_transmit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1aa:	2f ef       	ldi	r18, 0xFF	; 255
 1ac:	80 e7       	ldi	r24, 0x70	; 112
 1ae:	92 e0       	ldi	r25, 0x02	; 2
 1b0:	21 50       	subi	r18, 0x01	; 1
 1b2:	80 40       	sbci	r24, 0x00	; 0
 1b4:	90 40       	sbci	r25, 0x00	; 0
 1b6:	e1 f7       	brne	.-8      	; 0x1b0 <sim808_send_sms+0x1c>
 1b8:	00 c0       	rjmp	.+0      	; 0x1ba <sim808_send_sms+0x26>
 1ba:	00 00       	nop
	_delay_ms(50);
	char* beginning = "AT+CMGS=";
	char *quote = "\"";
	char *num1= concat(beginning, quote);
 1bc:	60 e1       	ldi	r22, 0x10	; 16
 1be:	71 e0       	ldi	r23, 0x01	; 1
 1c0:	82 e1       	ldi	r24, 0x12	; 18
 1c2:	91 e0       	ldi	r25, 0x01	; 1
	char *num2= concat(num1, tel_number);
 1c4:	be df       	rcall	.-132    	; 0x142 <concat>
 1c6:	b8 01       	movw	r22, r16
	char *num3= concat(num2, quote);
 1c8:	bc df       	rcall	.-136    	; 0x142 <concat>
 1ca:	60 e1       	ldi	r22, 0x10	; 16
 1cc:	71 e0       	ldi	r23, 0x01	; 1
	sim808_command(num3); //send a text message! You will get a '>' prompt for typing. Type out your message and when you are done send a [Control-Z] on an empty line to send
 1ce:	b9 df       	rcall	.-142    	; 0x142 <concat>
 1d0:	9c df       	rcall	.-200    	; 0x10a <sim808_command>
	// the message has to be written in the '>' prompt
	usart1_transmit(0xD);  // <CR>
 1d2:	8d e0       	ldi	r24, 0x0D	; 13
 1d4:	ec d0       	rcall	.+472    	; 0x3ae <usart1_transmit>
 1d6:	2f ef       	ldi	r18, 0xFF	; 255
 1d8:	80 e7       	ldi	r24, 0x70	; 112
 1da:	92 e0       	ldi	r25, 0x02	; 2
 1dc:	21 50       	subi	r18, 0x01	; 1
 1de:	80 40       	sbci	r24, 0x00	; 0
 1e0:	90 40       	sbci	r25, 0x00	; 0
 1e2:	e1 f7       	brne	.-8      	; 0x1dc <sim808_send_sms+0x48>
 1e4:	00 c0       	rjmp	.+0      	; 0x1e6 <sim808_send_sms+0x52>
 1e6:	00 00       	nop
	_delay_ms(50);
	char* end2= 0xD;
	char* end1= 0x1A;
	char* end= concat(end1, end2);
 1e8:	6d e0       	ldi	r22, 0x0D	; 13
 1ea:	70 e0       	ldi	r23, 0x00	; 0
 1ec:	8a e1       	ldi	r24, 0x1A	; 26
 1ee:	90 e0       	ldi	r25, 0x00	; 0
	sim808_command(sms);
 1f0:	a8 df       	rcall	.-176    	; 0x142 <concat>
 1f2:	ce 01       	movw	r24, r28
 1f4:	8a df       	rcall	.-236    	; 0x10a <sim808_command>
	usart1_transmit(0x1A);
 1f6:	8a e1       	ldi	r24, 0x1A	; 26
 1f8:	da d0       	rcall	.+436    	; 0x3ae <usart1_transmit>
 1fa:	8d e0       	ldi	r24, 0x0D	; 13
	usart1_transmit(0x0D);	
 1fc:	d8 d0       	rcall	.+432    	; 0x3ae <usart1_transmit>
 1fe:	2f ef       	ldi	r18, 0xFF	; 255
 200:	80 e7       	ldi	r24, 0x70	; 112
 202:	92 e0       	ldi	r25, 0x02	; 2
 204:	21 50       	subi	r18, 0x01	; 1
 206:	80 40       	sbci	r24, 0x00	; 0
 208:	90 40       	sbci	r25, 0x00	; 0
 20a:	e1 f7       	brne	.-8      	; 0x204 <sim808_send_sms+0x70>
 20c:	00 c0       	rjmp	.+0      	; 0x20e <sim808_send_sms+0x7a>
 20e:	00 00       	nop
 210:	df 91       	pop	r29
 212:	cf 91       	pop	r28
	//_delay_ms(50);
	//sim808_command(end);
	_delay_ms(50);

}
 214:	1f 91       	pop	r17
 216:	0f 91       	pop	r16
 218:	08 95       	ret

0000021a <usart0_init>:

#include "uart0.h"

void usart0_init() {
	
	UCSR0B |= (1<<RXEN0)|(1<<TXEN0)|(1<<RXCIE0);
 21a:	e1 ec       	ldi	r30, 0xC1	; 193
 21c:	f0 e0       	ldi	r31, 0x00	; 0
 21e:	80 81       	ld	r24, Z
 220:	88 69       	ori	r24, 0x98	; 152
 222:	80 83       	st	Z, r24
	UBRR0 = 103;
 224:	87 e6       	ldi	r24, 0x67	; 103
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 22c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 230:	08 95       	ret

00000232 <usart0_transmit>:
}

void usart0_transmit(char data) {
	 /* Wait for empty transmit buffer */
	 while ( !( UCSR0A & (1<<UDRE0)) );
 232:	e0 ec       	ldi	r30, 0xC0	; 192
 234:	f0 e0       	ldi	r31, 0x00	; 0
 236:	90 81       	ld	r25, Z
 238:	95 ff       	sbrs	r25, 5
 23a:	fd cf       	rjmp	.-6      	; 0x236 <usart0_transmit+0x4>
	 
	 /* Put data into buffer, sends the data */
	 UDR0 = data;
 23c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 240:	08 95       	ret

00000242 <main>:
char data;
int result_acceleration;

int main(void)
{
    DDRB |= (1 << 3);   //DDRB3
 242:	23 9a       	sbi	0x04, 3	; 4
	DDRA &=~(1<< 2);  //DDRA2
 244:	0a 98       	cbi	0x01, 2	; 1
	usart0_init();
 246:	e9 df       	rcall	.-46     	; 0x21a <usart0_init>
	usart1_init();
 248:	a6 d0       	rcall	.+332    	; 0x396 <usart1_init>
	adc_init();
 24a:	3e df       	rcall	.-388    	; 0xc8 <adc_init>
	sei();			// Enables global interrupts => CPU will listen to IO devices interrupt requests
 24c:	78 94       	sei
	//cli();		// Disable -||-
	adc_start_conversion();
 24e:	57 df       	rcall	.-338    	; 0xfe <adc_start_conversion>
 250:	c8 e7       	ldi	r28, 0x78	; 120
		//button2_old = button2;
		//test the accelerometer
		//usart0_transmit(big_acceleration(ADC >> 2));
		//usart0_transmit(0xD);
		//usart0_transmit(0xA);
		if(big_acceleration(ADC>>2) == '1'){
 252:	d0 e0       	ldi	r29, 0x00	; 0
 254:	88 81       	ld	r24, Y
 256:	99 81       	ldd	r25, Y+1	; 0x01
 258:	96 95       	lsr	r25
 25a:	87 95       	ror	r24
 25c:	96 95       	lsr	r25
 25e:	87 95       	ror	r24
 260:	3e df       	rcall	.-388    	; 0xde <big_acceleration>
 262:	81 33       	cpi	r24, 0x31	; 49
 264:	29 f4       	brne	.+10     	; 0x270 <main+0x2e>
 266:	6b e1       	ldi	r22, 0x1B	; 27
			sim808_send_sms("Warning! Abnormal acceleration!", "0033658806028");
 268:	71 e0       	ldi	r23, 0x01	; 1
 26a:	89 e2       	ldi	r24, 0x29	; 41
 26c:	91 e0       	ldi	r25, 0x01	; 1
 26e:	92 df       	rcall	.-220    	; 0x194 <sim808_send_sms>
 270:	2f ef       	ldi	r18, 0xFF	; 255
 272:	83 ec       	ldi	r24, 0xC3	; 195
 274:	99 e0       	ldi	r25, 0x09	; 9
 276:	21 50       	subi	r18, 0x01	; 1
 278:	80 40       	sbci	r24, 0x00	; 0
 27a:	90 40       	sbci	r25, 0x00	; 0
 27c:	e1 f7       	brne	.-8      	; 0x276 <main+0x34>
 27e:	00 c0       	rjmp	.+0      	; 0x280 <main+0x3e>
 280:	00 00       	nop
 282:	e8 cf       	rjmp	.-48     	; 0x254 <main+0x12>

00000284 <__vector_20>:
 284:	1f 92       	push	r1
 286:	0f 92       	push	r0





ISR(USART0_RX_vect){
 288:	0f b6       	in	r0, 0x3f	; 63
 28a:	0f 92       	push	r0
 28c:	11 24       	eor	r1, r1
 28e:	0b b6       	in	r0, 0x3b	; 59
 290:	0f 92       	push	r0
 292:	2f 93       	push	r18
 294:	3f 93       	push	r19
 296:	4f 93       	push	r20
 298:	5f 93       	push	r21
 29a:	6f 93       	push	r22
 29c:	7f 93       	push	r23
 29e:	8f 93       	push	r24
 2a0:	9f 93       	push	r25
 2a2:	af 93       	push	r26
 2a4:	bf 93       	push	r27
 2a6:	ef 93       	push	r30
 2a8:	ff 93       	push	r31
	
	data0 = UDR0;
 2aa:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 2ae:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <data0>
	usart1_transmit(data0);
 2b2:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <data0>
 2b6:	7b d0       	rcall	.+246    	; 0x3ae <usart1_transmit>
	
	
}
 2b8:	ff 91       	pop	r31
 2ba:	ef 91       	pop	r30
 2bc:	bf 91       	pop	r27
 2be:	af 91       	pop	r26
 2c0:	9f 91       	pop	r25
 2c2:	8f 91       	pop	r24
 2c4:	7f 91       	pop	r23
 2c6:	6f 91       	pop	r22
 2c8:	5f 91       	pop	r21
 2ca:	4f 91       	pop	r20
 2cc:	3f 91       	pop	r19
 2ce:	2f 91       	pop	r18
 2d0:	0f 90       	pop	r0
 2d2:	0b be       	out	0x3b, r0	; 59
 2d4:	0f 90       	pop	r0
 2d6:	0f be       	out	0x3f, r0	; 63
 2d8:	0f 90       	pop	r0
 2da:	1f 90       	pop	r1
 2dc:	18 95       	reti

000002de <__vector_28>:

ISR(USART1_RX_vect){
 2de:	1f 92       	push	r1
 2e0:	0f 92       	push	r0
 2e2:	0f b6       	in	r0, 0x3f	; 63
 2e4:	0f 92       	push	r0
 2e6:	11 24       	eor	r1, r1
 2e8:	0b b6       	in	r0, 0x3b	; 59
 2ea:	0f 92       	push	r0
 2ec:	2f 93       	push	r18
 2ee:	3f 93       	push	r19
 2f0:	4f 93       	push	r20
 2f2:	5f 93       	push	r21
 2f4:	6f 93       	push	r22
 2f6:	7f 93       	push	r23
 2f8:	8f 93       	push	r24
 2fa:	9f 93       	push	r25
 2fc:	af 93       	push	r26
 2fe:	bf 93       	push	r27
 300:	ef 93       	push	r30
 302:	ff 93       	push	r31
	data1=UDR1;
 304:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 308:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <__data_end>
	usart0_transmit(data1);
 30c:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <__data_end>
 310:	90 df       	rcall	.-224    	; 0x232 <usart0_transmit>
}
 312:	ff 91       	pop	r31
 314:	ef 91       	pop	r30
 316:	bf 91       	pop	r27
 318:	af 91       	pop	r26
 31a:	9f 91       	pop	r25
 31c:	8f 91       	pop	r24
 31e:	7f 91       	pop	r23
 320:	6f 91       	pop	r22
 322:	5f 91       	pop	r21
 324:	4f 91       	pop	r20
 326:	3f 91       	pop	r19
 328:	2f 91       	pop	r18
 32a:	0f 90       	pop	r0
 32c:	0b be       	out	0x3b, r0	; 59
 32e:	0f 90       	pop	r0
 330:	0f be       	out	0x3f, r0	; 63
 332:	0f 90       	pop	r0
 334:	1f 90       	pop	r1
 336:	18 95       	reti

00000338 <__vector_24>:
ISR(ADC_vect){
 338:	1f 92       	push	r1
 33a:	0f 92       	push	r0
 33c:	0f b6       	in	r0, 0x3f	; 63
 33e:	0f 92       	push	r0
 340:	11 24       	eor	r1, r1
 342:	0b b6       	in	r0, 0x3b	; 59
 344:	0f 92       	push	r0
 346:	2f 93       	push	r18
 348:	3f 93       	push	r19
 34a:	4f 93       	push	r20
 34c:	5f 93       	push	r21
 34e:	6f 93       	push	r22
 350:	7f 93       	push	r23
 352:	8f 93       	push	r24
 354:	9f 93       	push	r25
 356:	af 93       	push	r26
 358:	bf 93       	push	r27
 35a:	ef 93       	push	r30
 35c:	ff 93       	push	r31
	adc_result = ADC;
 35e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 362:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 366:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <adc_result+0x1>
 36a:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <adc_result>
	adc_start_conversion();
 36e:	c7 de       	rcall	.-626    	; 0xfe <adc_start_conversion>
	
 370:	ff 91       	pop	r31
 372:	ef 91       	pop	r30
 374:	bf 91       	pop	r27
 376:	af 91       	pop	r26
 378:	9f 91       	pop	r25
 37a:	8f 91       	pop	r24
 37c:	7f 91       	pop	r23
 37e:	6f 91       	pop	r22
 380:	5f 91       	pop	r21
 382:	4f 91       	pop	r20
 384:	3f 91       	pop	r19
 386:	2f 91       	pop	r18
 388:	0f 90       	pop	r0
 38a:	0b be       	out	0x3b, r0	; 59
 38c:	0f 90       	pop	r0
 38e:	0f be       	out	0x3f, r0	; 63
 390:	0f 90       	pop	r0
 392:	1f 90       	pop	r1
 394:	18 95       	reti

00000396 <usart1_init>:

#include "uart1.h"

void usart1_init() { 
	
	UCSR1B |= (1<<RXEN1)|(1<<TXEN1)|(1<<RXCIE1);
 396:	e9 ec       	ldi	r30, 0xC9	; 201
 398:	f0 e0       	ldi	r31, 0x00	; 0
 39a:	80 81       	ld	r24, Z
 39c:	88 69       	ori	r24, 0x98	; 152
 39e:	80 83       	st	Z, r24
	UBRR1 = 103;
 3a0:	87 e6       	ldi	r24, 0x67	; 103
 3a2:	90 e0       	ldi	r25, 0x00	; 0
 3a4:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
 3a8:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
 3ac:	08 95       	ret

000003ae <usart1_transmit>:
}

void usart1_transmit(char data) {
	/* Wait for empty transmit buffer */
	while ( !( UCSR1A & (1<<UDRE1)) );
 3ae:	e8 ec       	ldi	r30, 0xC8	; 200
 3b0:	f0 e0       	ldi	r31, 0x00	; 0
 3b2:	90 81       	ld	r25, Z
 3b4:	95 ff       	sbrs	r25, 5
 3b6:	fd cf       	rjmp	.-6      	; 0x3b2 <usart1_transmit+0x4>
	
	/* Put data into buffer, sends the data */
	UDR1 = data;
 3b8:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 3bc:	08 95       	ret

000003be <malloc>:
 3be:	0f 93       	push	r16
 3c0:	1f 93       	push	r17
 3c2:	cf 93       	push	r28
 3c4:	df 93       	push	r29
 3c6:	82 30       	cpi	r24, 0x02	; 2
 3c8:	91 05       	cpc	r25, r1
 3ca:	10 f4       	brcc	.+4      	; 0x3d0 <malloc+0x12>
 3cc:	82 e0       	ldi	r24, 0x02	; 2
 3ce:	90 e0       	ldi	r25, 0x00	; 0
 3d0:	e0 91 59 01 	lds	r30, 0x0159	; 0x800159 <__flp>
 3d4:	f0 91 5a 01 	lds	r31, 0x015A	; 0x80015a <__flp+0x1>
 3d8:	20 e0       	ldi	r18, 0x00	; 0
 3da:	30 e0       	ldi	r19, 0x00	; 0
 3dc:	a0 e0       	ldi	r26, 0x00	; 0
 3de:	b0 e0       	ldi	r27, 0x00	; 0
 3e0:	30 97       	sbiw	r30, 0x00	; 0
 3e2:	19 f1       	breq	.+70     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 3e4:	40 81       	ld	r20, Z
 3e6:	51 81       	ldd	r21, Z+1	; 0x01
 3e8:	02 81       	ldd	r16, Z+2	; 0x02
 3ea:	13 81       	ldd	r17, Z+3	; 0x03
 3ec:	48 17       	cp	r20, r24
 3ee:	59 07       	cpc	r21, r25
 3f0:	c8 f0       	brcs	.+50     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 3f2:	84 17       	cp	r24, r20
 3f4:	95 07       	cpc	r25, r21
 3f6:	69 f4       	brne	.+26     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 3f8:	10 97       	sbiw	r26, 0x00	; 0
 3fa:	31 f0       	breq	.+12     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 3fc:	12 96       	adiw	r26, 0x02	; 2
 3fe:	0c 93       	st	X, r16
 400:	12 97       	sbiw	r26, 0x02	; 2
 402:	13 96       	adiw	r26, 0x03	; 3
 404:	1c 93       	st	X, r17
 406:	27 c0       	rjmp	.+78     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
 408:	00 93 59 01 	sts	0x0159, r16	; 0x800159 <__flp>
 40c:	10 93 5a 01 	sts	0x015A, r17	; 0x80015a <__flp+0x1>
 410:	22 c0       	rjmp	.+68     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
 412:	21 15       	cp	r18, r1
 414:	31 05       	cpc	r19, r1
 416:	19 f0       	breq	.+6      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 418:	42 17       	cp	r20, r18
 41a:	53 07       	cpc	r21, r19
 41c:	18 f4       	brcc	.+6      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 41e:	9a 01       	movw	r18, r20
 420:	bd 01       	movw	r22, r26
 422:	ef 01       	movw	r28, r30
 424:	df 01       	movw	r26, r30
 426:	f8 01       	movw	r30, r16
 428:	db cf       	rjmp	.-74     	; 0x3e0 <malloc+0x22>
 42a:	21 15       	cp	r18, r1
 42c:	31 05       	cpc	r19, r1
 42e:	f9 f0       	breq	.+62     	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
 430:	28 1b       	sub	r18, r24
 432:	39 0b       	sbc	r19, r25
 434:	24 30       	cpi	r18, 0x04	; 4
 436:	31 05       	cpc	r19, r1
 438:	80 f4       	brcc	.+32     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
 43a:	8a 81       	ldd	r24, Y+2	; 0x02
 43c:	9b 81       	ldd	r25, Y+3	; 0x03
 43e:	61 15       	cp	r22, r1
 440:	71 05       	cpc	r23, r1
 442:	21 f0       	breq	.+8      	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 444:	fb 01       	movw	r30, r22
 446:	93 83       	std	Z+3, r25	; 0x03
 448:	82 83       	std	Z+2, r24	; 0x02
 44a:	04 c0       	rjmp	.+8      	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
 44c:	90 93 5a 01 	sts	0x015A, r25	; 0x80015a <__flp+0x1>
 450:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <__flp>
 454:	fe 01       	movw	r30, r28
 456:	32 96       	adiw	r30, 0x02	; 2
 458:	44 c0       	rjmp	.+136    	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>
 45a:	fe 01       	movw	r30, r28
 45c:	e2 0f       	add	r30, r18
 45e:	f3 1f       	adc	r31, r19
 460:	81 93       	st	Z+, r24
 462:	91 93       	st	Z+, r25
 464:	22 50       	subi	r18, 0x02	; 2
 466:	31 09       	sbc	r19, r1
 468:	39 83       	std	Y+1, r19	; 0x01
 46a:	28 83       	st	Y, r18
 46c:	3a c0       	rjmp	.+116    	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>
 46e:	20 91 57 01 	lds	r18, 0x0157	; 0x800157 <__brkval>
 472:	30 91 58 01 	lds	r19, 0x0158	; 0x800158 <__brkval+0x1>
 476:	23 2b       	or	r18, r19
 478:	41 f4       	brne	.+16     	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
 47a:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 47e:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 482:	30 93 58 01 	sts	0x0158, r19	; 0x800158 <__brkval+0x1>
 486:	20 93 57 01 	sts	0x0157, r18	; 0x800157 <__brkval>
 48a:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 48e:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 492:	21 15       	cp	r18, r1
 494:	31 05       	cpc	r19, r1
 496:	41 f4       	brne	.+16     	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
 498:	2d b7       	in	r18, 0x3d	; 61
 49a:	3e b7       	in	r19, 0x3e	; 62
 49c:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 4a0:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 4a4:	24 1b       	sub	r18, r20
 4a6:	35 0b       	sbc	r19, r21
 4a8:	e0 91 57 01 	lds	r30, 0x0157	; 0x800157 <__brkval>
 4ac:	f0 91 58 01 	lds	r31, 0x0158	; 0x800158 <__brkval+0x1>
 4b0:	e2 17       	cp	r30, r18
 4b2:	f3 07       	cpc	r31, r19
 4b4:	a0 f4       	brcc	.+40     	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
 4b6:	2e 1b       	sub	r18, r30
 4b8:	3f 0b       	sbc	r19, r31
 4ba:	28 17       	cp	r18, r24
 4bc:	39 07       	cpc	r19, r25
 4be:	78 f0       	brcs	.+30     	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
 4c0:	ac 01       	movw	r20, r24
 4c2:	4e 5f       	subi	r20, 0xFE	; 254
 4c4:	5f 4f       	sbci	r21, 0xFF	; 255
 4c6:	24 17       	cp	r18, r20
 4c8:	35 07       	cpc	r19, r21
 4ca:	48 f0       	brcs	.+18     	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
 4cc:	4e 0f       	add	r20, r30
 4ce:	5f 1f       	adc	r21, r31
 4d0:	50 93 58 01 	sts	0x0158, r21	; 0x800158 <__brkval+0x1>
 4d4:	40 93 57 01 	sts	0x0157, r20	; 0x800157 <__brkval>
 4d8:	81 93       	st	Z+, r24
 4da:	91 93       	st	Z+, r25
 4dc:	02 c0       	rjmp	.+4      	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>
 4de:	e0 e0       	ldi	r30, 0x00	; 0
 4e0:	f0 e0       	ldi	r31, 0x00	; 0
 4e2:	cf 01       	movw	r24, r30
 4e4:	df 91       	pop	r29
 4e6:	cf 91       	pop	r28
 4e8:	1f 91       	pop	r17
 4ea:	0f 91       	pop	r16
 4ec:	08 95       	ret

000004ee <free>:
 4ee:	cf 93       	push	r28
 4f0:	df 93       	push	r29
 4f2:	00 97       	sbiw	r24, 0x00	; 0
 4f4:	09 f4       	brne	.+2      	; 0x4f8 <free+0xa>
 4f6:	81 c0       	rjmp	.+258    	; 0x5fa <free+0x10c>
 4f8:	fc 01       	movw	r30, r24
 4fa:	32 97       	sbiw	r30, 0x02	; 2
 4fc:	13 82       	std	Z+3, r1	; 0x03
 4fe:	12 82       	std	Z+2, r1	; 0x02
 500:	a0 91 59 01 	lds	r26, 0x0159	; 0x800159 <__flp>
 504:	b0 91 5a 01 	lds	r27, 0x015A	; 0x80015a <__flp+0x1>
 508:	10 97       	sbiw	r26, 0x00	; 0
 50a:	81 f4       	brne	.+32     	; 0x52c <free+0x3e>
 50c:	20 81       	ld	r18, Z
 50e:	31 81       	ldd	r19, Z+1	; 0x01
 510:	82 0f       	add	r24, r18
 512:	93 1f       	adc	r25, r19
 514:	20 91 57 01 	lds	r18, 0x0157	; 0x800157 <__brkval>
 518:	30 91 58 01 	lds	r19, 0x0158	; 0x800158 <__brkval+0x1>
 51c:	28 17       	cp	r18, r24
 51e:	39 07       	cpc	r19, r25
 520:	51 f5       	brne	.+84     	; 0x576 <free+0x88>
 522:	f0 93 58 01 	sts	0x0158, r31	; 0x800158 <__brkval+0x1>
 526:	e0 93 57 01 	sts	0x0157, r30	; 0x800157 <__brkval>
 52a:	67 c0       	rjmp	.+206    	; 0x5fa <free+0x10c>
 52c:	ed 01       	movw	r28, r26
 52e:	20 e0       	ldi	r18, 0x00	; 0
 530:	30 e0       	ldi	r19, 0x00	; 0
 532:	ce 17       	cp	r28, r30
 534:	df 07       	cpc	r29, r31
 536:	40 f4       	brcc	.+16     	; 0x548 <free+0x5a>
 538:	4a 81       	ldd	r20, Y+2	; 0x02
 53a:	5b 81       	ldd	r21, Y+3	; 0x03
 53c:	9e 01       	movw	r18, r28
 53e:	41 15       	cp	r20, r1
 540:	51 05       	cpc	r21, r1
 542:	f1 f0       	breq	.+60     	; 0x580 <free+0x92>
 544:	ea 01       	movw	r28, r20
 546:	f5 cf       	rjmp	.-22     	; 0x532 <free+0x44>
 548:	d3 83       	std	Z+3, r29	; 0x03
 54a:	c2 83       	std	Z+2, r28	; 0x02
 54c:	40 81       	ld	r20, Z
 54e:	51 81       	ldd	r21, Z+1	; 0x01
 550:	84 0f       	add	r24, r20
 552:	95 1f       	adc	r25, r21
 554:	c8 17       	cp	r28, r24
 556:	d9 07       	cpc	r29, r25
 558:	59 f4       	brne	.+22     	; 0x570 <free+0x82>
 55a:	88 81       	ld	r24, Y
 55c:	99 81       	ldd	r25, Y+1	; 0x01
 55e:	84 0f       	add	r24, r20
 560:	95 1f       	adc	r25, r21
 562:	02 96       	adiw	r24, 0x02	; 2
 564:	91 83       	std	Z+1, r25	; 0x01
 566:	80 83       	st	Z, r24
 568:	8a 81       	ldd	r24, Y+2	; 0x02
 56a:	9b 81       	ldd	r25, Y+3	; 0x03
 56c:	93 83       	std	Z+3, r25	; 0x03
 56e:	82 83       	std	Z+2, r24	; 0x02
 570:	21 15       	cp	r18, r1
 572:	31 05       	cpc	r19, r1
 574:	29 f4       	brne	.+10     	; 0x580 <free+0x92>
 576:	f0 93 5a 01 	sts	0x015A, r31	; 0x80015a <__flp+0x1>
 57a:	e0 93 59 01 	sts	0x0159, r30	; 0x800159 <__flp>
 57e:	3d c0       	rjmp	.+122    	; 0x5fa <free+0x10c>
 580:	e9 01       	movw	r28, r18
 582:	fb 83       	std	Y+3, r31	; 0x03
 584:	ea 83       	std	Y+2, r30	; 0x02
 586:	49 91       	ld	r20, Y+
 588:	59 91       	ld	r21, Y+
 58a:	c4 0f       	add	r28, r20
 58c:	d5 1f       	adc	r29, r21
 58e:	ec 17       	cp	r30, r28
 590:	fd 07       	cpc	r31, r29
 592:	61 f4       	brne	.+24     	; 0x5ac <free+0xbe>
 594:	80 81       	ld	r24, Z
 596:	91 81       	ldd	r25, Z+1	; 0x01
 598:	84 0f       	add	r24, r20
 59a:	95 1f       	adc	r25, r21
 59c:	02 96       	adiw	r24, 0x02	; 2
 59e:	e9 01       	movw	r28, r18
 5a0:	99 83       	std	Y+1, r25	; 0x01
 5a2:	88 83       	st	Y, r24
 5a4:	82 81       	ldd	r24, Z+2	; 0x02
 5a6:	93 81       	ldd	r25, Z+3	; 0x03
 5a8:	9b 83       	std	Y+3, r25	; 0x03
 5aa:	8a 83       	std	Y+2, r24	; 0x02
 5ac:	e0 e0       	ldi	r30, 0x00	; 0
 5ae:	f0 e0       	ldi	r31, 0x00	; 0
 5b0:	12 96       	adiw	r26, 0x02	; 2
 5b2:	8d 91       	ld	r24, X+
 5b4:	9c 91       	ld	r25, X
 5b6:	13 97       	sbiw	r26, 0x03	; 3
 5b8:	00 97       	sbiw	r24, 0x00	; 0
 5ba:	19 f0       	breq	.+6      	; 0x5c2 <free+0xd4>
 5bc:	fd 01       	movw	r30, r26
 5be:	dc 01       	movw	r26, r24
 5c0:	f7 cf       	rjmp	.-18     	; 0x5b0 <free+0xc2>
 5c2:	8d 91       	ld	r24, X+
 5c4:	9c 91       	ld	r25, X
 5c6:	11 97       	sbiw	r26, 0x01	; 1
 5c8:	9d 01       	movw	r18, r26
 5ca:	2e 5f       	subi	r18, 0xFE	; 254
 5cc:	3f 4f       	sbci	r19, 0xFF	; 255
 5ce:	82 0f       	add	r24, r18
 5d0:	93 1f       	adc	r25, r19
 5d2:	20 91 57 01 	lds	r18, 0x0157	; 0x800157 <__brkval>
 5d6:	30 91 58 01 	lds	r19, 0x0158	; 0x800158 <__brkval+0x1>
 5da:	28 17       	cp	r18, r24
 5dc:	39 07       	cpc	r19, r25
 5de:	69 f4       	brne	.+26     	; 0x5fa <free+0x10c>
 5e0:	30 97       	sbiw	r30, 0x00	; 0
 5e2:	29 f4       	brne	.+10     	; 0x5ee <free+0x100>
 5e4:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <__flp+0x1>
 5e8:	10 92 59 01 	sts	0x0159, r1	; 0x800159 <__flp>
 5ec:	02 c0       	rjmp	.+4      	; 0x5f2 <free+0x104>
 5ee:	13 82       	std	Z+3, r1	; 0x03
 5f0:	12 82       	std	Z+2, r1	; 0x02
 5f2:	b0 93 58 01 	sts	0x0158, r27	; 0x800158 <__brkval+0x1>
 5f6:	a0 93 57 01 	sts	0x0157, r26	; 0x800157 <__brkval>
 5fa:	df 91       	pop	r29
 5fc:	cf 91       	pop	r28
 5fe:	08 95       	ret

00000600 <strcat>:
 600:	fb 01       	movw	r30, r22
 602:	dc 01       	movw	r26, r24
 604:	0d 90       	ld	r0, X+
 606:	00 20       	and	r0, r0
 608:	e9 f7       	brne	.-6      	; 0x604 <strcat+0x4>
 60a:	11 97       	sbiw	r26, 0x01	; 1
 60c:	01 90       	ld	r0, Z+
 60e:	0d 92       	st	X+, r0
 610:	00 20       	and	r0, r0
 612:	e1 f7       	brne	.-8      	; 0x60c <strcat+0xc>
 614:	08 95       	ret

00000616 <strcpy>:
 616:	fb 01       	movw	r30, r22
 618:	dc 01       	movw	r26, r24
 61a:	01 90       	ld	r0, Z+
 61c:	0d 92       	st	X+, r0
 61e:	00 20       	and	r0, r0
 620:	e1 f7       	brne	.-8      	; 0x61a <strcpy+0x4>
 622:	08 95       	ret

00000624 <_exit>:
 624:	f8 94       	cli

00000626 <__stop_program>:
 626:	ff cf       	rjmp	.-2      	; 0x626 <__stop_program>
